include:
  - project: "dep/library/ci-library"
    ref: production
    file: "main.yml"

build-image-oauth2-proxy:
  extends: build-image
  variables:
    DOCKERFILE_PATH: "oauth2-proxy/Dockerfile"
    IMAGE_TAG_TO_BUILD: "${OAUTH_PROXY_IMAGE_TAG}"
  script:
    - mkdir oauth2-proxy/certs
    - CopyCertsToDirectory "oauth2-proxy/certs"
    - !reference [ .build-image, script ]
  rules:
    # include the job depending on some conditions
    - if: '$ENABLE_OAUTH_PROXY == "true" && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH'
      exists:
        - "oauth2-proxy/Dockerfile"




variables:
  PROJ_FILE_PATH: "pom.xml"
  SONAR_SCANNER_OPTIONS: |
    -Dsonar.dependencyCheck.xmlReportPath=dependency-check/dependency-check-report.xml
    -Dsonar.dependencyCheck.jsonReportPath=dependency-check/dependency-check-report.json
    -Dsonar.dependencyCheck.htmlReportPath=dependency-check/dependency-check-report.html
  OAUTH_PROXY_IMAGE_TAG: "v7-update1"
  # disabled by default, to avoid issues when not defined
  ENABLE_OAUTH_PROXY: "false"

build-application:
  image: ${CI_REGISTRY}/dep/library/project-oci-images/build-java-jdk17-maven:3.9.3-update1
  script:
    - cd "${PROJECT_ROOT_DIR}"
    - rm -f target/*.jar
    # Skipping check as we will do it in test-application
    - |
      mvn package \
        -Dmaven.test.skip \
        -Dstyle.color=always \
        -s settings.xml
  cache:
    # cache target folder for pipeline performances
    policy: pull-push
    untracked: false
    paths:
      - $PROJECT_ROOT_DIR/target/
  artifacts:
    paths:
      - $PROJECT_ROOT_DIR/target/*.jar

test-application:
  extends: .test-application
  image: !reference [ build-application, image ]
  script:
    - cd "${PROJECT_ROOT_DIR}"
    - |
      mvn verify \
        -Dstyle.color=always \
        -s settings.xml
    - awk -F"," '{ instructions += $4 + $5; covered += $5 } END { print covered, "/", instructions, " instructions covered"; print 100*covered/instructions, "% covered" }' target/site/jacoco/jacoco.csv
  coverage: '/(\d+(?:\.\d+)?)? % covered/'
  # need to explicitly set the same paths: as for the build-application (and same dependencies) for it to work
  cache:
    paths:
      - $PROJECT_ROOT_DIR/target/
    policy: pull
  artifacts:
    when: always
    paths:
      - $PROJECT_ROOT_DIR/target/
    reports:
      junit:
        - $PROJECT_ROOT_DIR/target/surefire-reports/*.xml
        - $PROJECT_ROOT_DIR/target/failsafe-reports/*.xml

sonarqube:
  # doing this in a second analysis stage to have the dependency-check artifacts ready to be uploaded to Sonarqube
  stage: analysis2
  image: !reference [ build-application, image ]
  script:
    - !reference [ .sonarqube-common, script ]
    - |
      mvn sonar:sonar \
        -Dstyle.color=always \
        -s settings.xml \
        -Dsonar.host.url=${SONAR_HOST_URL} \
        -Dsonar.login=${SONAR_LOGIN} \
        -Dsonar.qualitygate.wait=${SONAR_QUALITYGATE_WAIT} \
        ${ANALYSIS_OPTIONS} \
        ${SONAR_SCANNER_OPTIONS} \
        ${JAVA_OPTS}
  cache: !reference [ test-application, cache ]

upload-artifact:
  extends: .java-job-with-web-requests
  image: !reference [ build-application, image ]
  variables:
    UPLOAD_ARTIFACT_USERNAME: $CI_DEPLOY_USER
    UPLOAD_ARTIFACT_PASSWORD: $CI_DEPLOY_PASSWORD
  script:
    - cd "${PROJECT_ROOT_DIR}"
    - SetVersion
    - if [[ $VERSION == *SNAPSHOT ]]; then echo -e "${COLOR_CYAN}[INFO] Uploading the artifact to $UPLOAD_SNAPSHOTS_REPO_URL ${COLOR_DEFAULT}"; else echo -e "${COLOR_CYAN}[INFO] Uploading the artifact to $UPLOAD_RELEASES_REPO_URL ${COLOR_DEFAULT}"; fi
    - |
      mvn deploy \
        -Dmaven.test.skip \
        -s settings.xml
  rules:
    - if: '$UPLOAD_ARTIFACT_USERNAME && $UPLOAD_ARTIFACT_PASSWORD && ($UPLOAD_RELEASES_REPO_URL || $UPLOAD_SNAPSHOTS_REPO_URL)'

defectdojo:
  variables:
    SONAR_PROJECT_KEY: "com.soprasteria:osca"
